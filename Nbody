#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <mpi.h>
#define D_N 1000
#define D_TIME 50
#define G 6.67300e-11
#define X_BD 1.0e6
#define Y_BD 1.0e6
#define Z_BD 1.0e6
#define R_BD 10
#define INC_TIME 0.01
#define THETA 1.0
#define MASS_OF_JUPITER 1.899e27
#define MASS_OF_EARTH 5.974e24
#define MASS_OF_MOON 7.348e22
#define MASS_OF_UNKNOWN 1.899e12
typedef struct
{
 double px, py, pz;
}Position;
typedef struct
{
 double vx, vy, vz;
}Velocity;
typedef struct
{
 double fx, fy, fz;
}Force;
typedef struct Cell
{
 int index;
 int no_subcells;
 double mass;
 double x, y, z;
 double cx, cy, cz;
 double width, height, depth;
 struct Cell* subcells[8];
}Cell;
Position* pos;
Velocity* ivel;
Velocity* vel;
double* mass;
double* radius;
Force* force;
Cell* root_cell;
MPI_Datatype MPI_POSITION;
MPI_Datatype MPI_VELOCITY;
int N;
int TIME;
int rank;
int size;
int part_size;
int pindex;
int name_length;
char name[MPI_MAX_PROCESSOR_NAME];
double generate_rand()
{
 return rand()/((double)RAND_MAX + 1);
}
double generate_rand_ex()
{
 return 2 * generate_rand() - 1;
}
void init_space()
{
 int i;
 double ixbound = X_BD - R_BD;
 double iybound = Y_BD - R_BD;
 double izbound = Z_BD - R_BD;
 for (i = 0; i < N; i++)
 {
 mass[i] = MASS_OF_UNKNOWN * generate_rand();
 radius[i] = R_BD * generate_rand();
 pos[i].px = generate_rand() * ixbound;
 pos[i].py = generate_rand() * iybound;
 pos[i].pz = generate_rand() * izbound;
 ivel[i].vx = generate_rand_ex();
 ivel[i].vy = generate_rand_ex();
 ivel[i].vz = generate_rand_ex();
 }
}
double calc_dist(Position a, Position b)
{
 return sqrt(pow((a.px - b.px), 2.0) + pow((a.py - b.py), 2.0) +
 pow((a.pz - b.pz), 2.0));
}
void calc_vel()
{
 int i;
 for (i = 0; i < part_size; i++)
 {
 vel[i].vx += (force[i].fx / mass[i + pindex]) * INC_TIME;
 vel[i].vy += (force[i].fy / mass[i + pindex]) * INC_TIME;
 vel[i].vz += (force[i].fz / mass[i + pindex]) * INC_TIME;
 }
}
void calc_pos()
{
 int i;
 for (i = 0; i < part_size; i++)
 {
 pos[i + pindex].px += vel[i].vx * INC_TIME;
 pos[i + pindex].py += vel[i].vy * INC_TIME;
 pos[i + pindex].pz += vel[i].vz * INC_TIME;

 if ((pos[i + pindex].px + radius[i + pindex]) >= X_BD ||
 (pos[i + pindex].px - radius[i + pindex]) <= 0)
 vel[i].vx *= -1;
 else if ((pos[i + pindex].py + radius[i + pindex] >= Y_BD) ||
 (pos[i + pindex].py - radius[i + pindex]) <= 0)
 vel[i].vy *= -1;
 else if ((pos[i + pindex].pz + radius[i + pindex]) >= Z_BD ||
 (pos[i + pindex].pz - radius[i + pindex]) <= 0)
 vel[i].vz *= -1;
 }
}
Cell* BH_create(double width, double height, double depth)
{
 Cell* cell = malloc(sizeof(Cell));
 cell->mass = 0;
 cell->no_subcells = 0;
 cell->index = -1;
 cell->cx = 0;
 cell->cy = 0;
 cell->cz = 0;
 cell->width = width;
 cell->height = height;
 cell->depth = depth;
 return cell;
}
void setloc_subcells(Cell* cell, double width, double heigth, double depth)
{
 cell->subcells[0]->x = cell->x;
 cell->subcells[0]->y = cell->y;
 cell->subcells[0]->z = cell->z;
 cell->subcells[1]->x = cell->x + width;
 cell->subcells[1]->y = cell->y;
 cell->subcells[1]->z = cell->z;
 cell->subcells[2]->x = cell->x + width;
 cell->subcells[2]->y = cell->y;
 cell->subcells[2]->z = cell->z + depth;
 cell->subcells[3]->x = cell->x;
 cell->subcells[3]->y = cell->y;
 cell->subcells[3]->z = cell->z + depth;
 cell->subcells[4]->x = cell->x;
 cell->subcells[4]->y = cell->y + heigth;
 cell->subcells[4]->z = cell->z;
 cell->subcells[5]->x = cell->x + width;
 cell->subcells[5]->y = cell->y + heigth;
 cell->subcells[5]->z = cell->z;
 cell->subcells[6]->x = cell->x + width;
 cell->subcells[6]->y = cell->y + heigth;
 cell->subcells[6]->z = cell->z + depth;
 cell->subcells[7]->x = cell->x;
 cell->subcells[7]->y = cell->y + heigth;
 cell->subcells[7]->z = cell->z + depth;
}
void gen_subcells(Cell* cell)
{
 double width = cell->width / 2.0;
 double height = cell->height / 2.0;
 double depth = cell->depth / 2.0;
 cell->no_subcells = 8;

 int i;
 for (i = 0; i < cell->no_subcells; i++)
 {
 cell->subcells[i] = BH_create(width, height, depth);
 }
 setloc_subcells(cell, width, height, depth);
}
int loc_subcells(Cell* cell, int index)
{
 if (pos[index].px > cell->subcells[6]->x)
 {
 if (pos[index].py > cell->subcells[6]->y)
 {
 if (pos[index].pz > cell->subcells[6]->z)
 return 6;
 else
 return 5;
 }
 else
 {
 if (pos[index].pz > cell->subcells[6]->z)
 return 2;
 else
 return 1;
 }
 }
 else
 {
 if (pos[index].py > cell->subcells[6]->y)
 {
 if (pos[index].pz > cell->subcells[6]->z)
 return 7;
 else
 return 4;
 }
 else
 {
 if (pos[index].pz > cell->subcells[6]->z)
 return 3;
 else
 return 0;
 }
 }
}
void add_to_cell(Cell* cell, int index)
{
 if (cell->index == -1)
 {
 cell->index = index;
 return;
 }
 gen_subcells(cell);
 int sc1 = loc_subcells(cell, cell->index);
 cell->subcells[sc1]->index = cell->index;
 int sc2 = loc_subcells(cell, index);
 if (sc1 == sc2)
 add_to_cell(cell->subcells[sc1], index);
 else
 cell->subcells[sc2]->index = index;
}
void gen_tree()
{
 root_cell = BH_create(X_BD, Y_BD, Z_BD);
 root_cell->index = 0;
 root_cell->x = 0;
 root_cell->y = 0;
 root_cell->z = 0;
 int i;
 for (i = 1; i < N; i++)
 {
 Cell* cell = root_cell;

 while (cell->no_subcells != 0)
 {
 int sc = loc_subcells(cell, i);
 cell = cell->subcells[sc];
 }
 add_to_cell(cell, i);
 }
}
Cell* calc_cellprop(Cell* cell)
{
 if (cell->no_subcells == 0)
 {
 if (cell->index != -1)
 {
 cell->mass = mass[cell->index];
 return cell;
 }
 }
 else
 {
 int i;
 double tx = 0, ty = 0, tz = 0;
 for (i = 0; i < cell->no_subcells; i++)
 {
 Cell* temp = calc_cellprop(cell->subcells[i]);
 if (temp != NULL)
 {
 cell->mass += temp->mass;
 tx += pos[temp->index].px * temp->mass;
 ty += pos[temp->index].py * temp->mass;
 tz += pos[temp->index].pz * temp->mass;
 }
 }

 cell->cx = tx / cell->mass;
 cell->cy = ty / cell->mass;
 cell->cz = tz / cell->mass;
 return cell;
 }
 return NULL;
}
void calc_force_cell(Cell* cell, int index)
{
 double d = calc_dist(pos[index], pos[cell->index]);
 double f = (G * (mass[index] * mass[cell->index]) / (pow(d, 2.0)));

 force[index - pindex].fx += f * ((pos[cell->index].px - pos[index].px) / d);
 force[index - pindex].fy += f * ((pos[cell->index].py - pos[index].py) / d);
 force[index - pindex].fz += f * ((pos[cell->index].pz - pos[index].pz) / d);
}
void calc_force_tree(Cell* cell, int index)
{
 if (cell->no_subcells == 0)
 {
 if (cell->index != -1 && cell->index != index)
 {
 calc_force_cell(cell, index);
 }
 }
 else
 {
 double d = calc_dist(pos[index], pos[cell->index]);

 if (THETA > (cell->width / d))
 {
 calc_force_cell(cell, index);
 }
 else
 {
 int i;
 for (i = 0; i < cell->no_subcells; i++)
 {
 calc_force_tree(cell->subcells[i], index);
 }
 }
 }
}
void calc_force()
{
 int i, j;
 for (i = 0; i < part_size; i++)
 {
 force[i].fx = 0.0;
 force[i].fy = 0.0;
 force[i].fz = 0.0;
 calc_force_tree(root_cell, i + pindex);
 }
}
void del_tree(Cell* cell)
{
 if (cell->no_subcells == 0)
 {
 free(cell);
 return;
 }
 int i;
 for (i = 0; i < cell->no_subcells; i++)
 {
 del_tree(cell->subcells[i]);
 }
 free(cell);
}
void res_out()
{
 FILE* file;
 file = fopen("out.dat", "w");
 if (file == NULL)
 {
 fprintf(stderr,"Cannot open output file\n");
 exit (0);
 }
 int i;
 for (i = 0; i < N; i++)
 {
 fprintf(file, "px=%f, py=%f, pz=%f\n", pos[i].px, pos[i].py,
 pos[i].pz);
 }
 fclose(file);
}
void init_vel()
{
 int i;
 for (i = 0; i < part_size; i++)
 {
 vel[i].vx = 0;
 vel[i].vy = 0;
 vel[i].vz = 0;
 }
}
void run_simulation()
{
 if (rank == 0)
 printf("\nRunning: %d bodies with %d iterations and %.2f time increment.\n",
N, TIME, INC_TIME);

 MPI_Bcast(mass, N, MPI_DOUBLE, 0, MPI_COMM_WORLD);
 MPI_Bcast(pos, N, MPI_POSITION, 0, MPI_COMM_WORLD);
 MPI_Scatter(ivel, part_size, MPI_VELOCITY, vel, part_size, MPI_VELOCITY, 0,
MPI_COMM_WORLD);
 int i;
 for (i = 0; i < TIME; i++)
 {
 gen_tree();
 calc_cellprop(root_cell);
 calc_force();
 del_tree(root_cell);
 calc_vel();
 calc_pos();

 MPI_Allgather(pos + (rank * part_size), part_size, MPI_POSITION,
 pos, part_size, MPI_POSITION, MPI_COMM_WORLD);
 }
 if (rank == 0)
 res_out();
}
int main(int argc, char* argv[])
{
 MPI_Init(&argc, &argv);
 N = D_N;
 TIME = D_TIME;
 MPI_Comm_rank(MPI_COMM_WORLD, &rank);
 MPI_Comm_size(MPI_COMM_WORLD, &size);
 MPI_Type_contiguous(3, MPI_DOUBLE, &MPI_POSITION);
 MPI_Type_contiguous(3, MPI_DOUBLE, &MPI_VELOCITY);
 MPI_Type_commit(&MPI_POSITION);
 MPI_Type_commit(&MPI_VELOCITY);
 MPI_Get_processor_name(name, &name_length);
 printf("\nRank= %d, Processor= %s, N= %d, TIME= %d\n", rank, name, N, TIME);
 part_size = N / size;

 pindex = rank * part_size;
 mass = (double *) malloc(N * sizeof(double));
 radius = (double *) malloc(N * sizeof(double));
 pos = (Position *) malloc(N * sizeof(Position));
 ivel = (Velocity *) malloc(N * sizeof(Velocity));
 vel = (Velocity *) malloc(part_size * sizeof(Velocity));
 force = (Force *) malloc(part_size * sizeof(Force));

 init_vel();

 if (rank == 0)
 {
 init_space();
 }
 run_simulation();
 MPI_Finalize();

 return 0; 
